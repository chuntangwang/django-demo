openapi: 3.0.3
info:
  title: Restaurant Open API
  version: 1.0.0
  description: "\nA demo for restaurant review system.\n\nIf you're using `SessionAuthentication`\
    \ you'll need to include valid `CSRF tokens` for any `POST`, `PUT`, `PATCH` or\
    \ `DELETE` operations.  \nRefresh the page if encountered `CSRF Failed: CSRF token\
    \ from the 'X-Csrftoken' HTTP header incorrect.` response.\n    "
paths:
  /api/v1/auth-token/:
    post:
      operationId: api_v1_auth_token_create
      description: Create or update the auth token of session user.
      tags:
      - Authorization
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRequest'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailResponse'
          description: ''
  /api/v1/login/:
    post:
      operationId: api_v1_login_create
      description: Login with username and password.
      tags:
      - Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailResponse'
          description: ''
  /api/v1/logout/:
    delete:
      operationId: api_v1_logout_destroy
      description: Logout the current user.
      tags:
      - Authorization
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailResponse'
          description: ''
  /api/v1/register/:
    post:
      operationId: api_v1_register_create
      description: Register a new user.
      tags:
      - Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: ''
  /api/v1/restaurants/:
    get:
      operationId: api_v1_restaurants_list
      description: List all restaurants with descending order of average score.
      parameters:
      - in: query
        name: ordering
        schema:
          type: string
          enum:
          - -avg_score
          - avg_score
        description: Sort by average score.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Restaurant
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRestaurantList'
          description: ''
    post:
      operationId: api_v1_restaurants_create
      description: Create a restaurant.
      tags:
      - Restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateRestaurantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUpdateRestaurantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateRestaurantRequest'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
          description: ''
  /api/v1/restaurants/{id}/:
    get:
      operationId: api_v1_restaurants_retrieve
      description: Retrieve a restaurant.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this restaurant.
        required: true
      tags:
      - Restaurant
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
          description: ''
    put:
      operationId: api_v1_restaurants_update
      description: Update a restaurant.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this restaurant.
        required: true
      tags:
      - Restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateRestaurantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUpdateRestaurantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateRestaurantRequest'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
          description: ''
    patch:
      operationId: api_v1_restaurants_partial_update
      description: Partial update a restaurant.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this restaurant.
        required: true
      tags:
      - Restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPartialUpdateRestaurantRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPartialUpdateRestaurantRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPartialUpdateRestaurantRequest'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
          description: ''
    delete:
      operationId: api_v1_restaurants_destroy
      description: Delete a restaurant.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this restaurant.
        required: true
      tags:
      - Restaurant
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/reviews/:
    get:
      operationId: api_v1_reviews_list
      description: List all reviews.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: restaurant
        schema:
          type: integer
        description: Filter by restaurant id.
      - in: query
        name: restaurant__name
        schema:
          type: string
        description: Filter by exact restaurant.name.
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user id.
      - in: query
        name: user__username
        schema:
          type: string
        description: Filter by exact user.username.
      tags:
      - Review
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
    post:
      operationId: api_v1_reviews_create
      description: Create a review, same user can only create a review in same restaurant.
      tags:
      - Review
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateReviewRequest'
            examples:
              RequestExample:
                value:
                  restaurant_id: 1
                  score: 5
                  comment: 5 stars
                summary: Request Example
                description: '`restaurant_id`: should greater than or equal to 1,
                  `score`: Integers of [1, 2, 3, 4, 5]'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUpdateReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateReviewRequest'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                ResponseExample:
                  value:
                    restaurant:
                      id: 1
                      creator: user
                      avg_score: 5
                      name: Costco
                      description: A shopping mall
                    user:
                      username: user
                      email: user@example.com
                    score: 1
                    comment: 5 stars
                    date_created: '2025-02-02T17:37:03.560Z'
                  summary: Response Example
          description: ''
  /api/v1/reviews/{id}/:
    get:
      operationId: api_v1_reviews_retrieve
      description: Retrieve a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - Review
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: api_v1_reviews_update
      description: Update a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - Review
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUpdateReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateUpdateReviewRequest'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: api_v1_reviews_partial_update
      description: Partial update a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - Review
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPartialUpdateReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPartialUpdateReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPartialUpdateReviewRequest'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: api_v1_reviews_destroy
      description: Delete a review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this review.
        required: true
      tags:
      - Review
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    CreateUpdateRestaurantRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 250
        description:
          type: string
      required:
      - description
      - name
    CreateUpdateReviewRequest:
      type: object
      properties:
        restaurant_id:
          type: string
        score:
          $ref: '#/components/schemas/ScoreEnum'
        comment:
          type: string
      required:
      - comment
      - restaurant_id
      - score
    DetailResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    ErrorsResponse:
      type: object
      properties:
        non_field_errors:
          type: array
          items: {}
      required:
      - non_field_errors
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
    LoginResponse:
      type: object
      properties:
        detail:
          type: string
        session_id:
          type: string
      required:
      - detail
      - session_id
    PaginatedRestaurantList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Restaurant'
    PaginatedReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    PatchedPartialUpdateRestaurantRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 250
        description:
          type: string
    PatchedPartialUpdateReviewRequest:
      type: object
      properties:
        restaurant_id:
          type: string
        score:
          $ref: '#/components/schemas/ScoreEnum'
        comment:
          type: string
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        creator:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        avg_score:
          type: number
          format: double
          readOnly: true
        name:
          type: string
          maxLength: 250
        description:
          type: string
      required:
      - avg_score
      - creator
      - id
      - name
    Review:
      type: object
      properties:
        restaurant_id:
          type: integer
          writeOnly: true
        restaurant:
          allOf:
          - $ref: '#/components/schemas/Restaurant'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        score:
          $ref: '#/components/schemas/ScoreEnum'
        comment:
          type: string
        date_created:
          type: string
          format: date-time
          readOnly: true
      required:
      - date_created
      - restaurant
      - restaurant_id
      - score
      - user
    ScoreEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - 1
        * `2` - 2
        * `3` - 3
        * `4` - 4
        * `5` - 5
    TokenRequest:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - password
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
tags:
- name: Login
  description: Get authorization before executing APIs that require authenticated
    permission.
- name: Authorization
  description: Authorization operations
externalDocs:
  url: https://www.django-rest-framework.org/topics/ajax-csrf-cors/
